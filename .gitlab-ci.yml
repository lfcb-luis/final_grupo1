image: python:3.9

stages:
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE_NAME: "${DOCKER_HUB_USER}/proyecto_ocr"

# Job para ejecutar las pruebas
test-job:
  stage: test
  before_script:
    - apt-get update && apt-get install -y libgl1-mesa-glx libglib2.0-0
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -e .
  script:
    - pytest tests/ --verbose --junitxml=report.xml
  artifacts:
    reports:
      junit: report.xml
  only:
    - main
    - dev

# Job combinado para construir y subir la imagen Docker
build-and-push:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
  script:
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        docker build -t $DOCKER_IMAGE_NAME:latest -t $DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA .
        docker push $DOCKER_IMAGE_NAME:latest
        docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA
        echo "Imagen subida a Docker Hub con tags 'latest' y '$CI_COMMIT_SHORT_SHA'"
      else
        docker build -t $DOCKER_IMAGE_NAME:dev -t $DOCKER_IMAGE_NAME:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA .
        docker push $DOCKER_IMAGE_NAME:dev
        docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
        echo "Imagen subida a